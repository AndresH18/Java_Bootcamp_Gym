package com.javabootcamp.gym.services;

import com.javabootcamp.gym.data.dto.TrainerTrainingDto;
import com.javabootcamp.gym.data.dto.TrainingFilterDto;
import com.javabootcamp.gym.data.dto.UpdateTrainerDto;
import com.javabootcamp.gym.data.model.Trainer;
import com.javabootcamp.gym.data.model.TrainingType;
import com.javabootcamp.gym.data.model.User;
import com.javabootcamp.gym.data.repository.TrainerRepository;
import com.javabootcamp.gym.data.repository.TrainingRepository;
import com.javabootcamp.gym.data.viewmodels.TrainerRegistrationViewModel;
import com.javabootcamp.gym.services.helper.ServiceHelper;
import com.javabootcamp.gym.services.helper.UpdateServiceHelper;
import com.javabootcamp.gym.services.user.UserService;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public final class TrainerService implements IUpdateService<UpdateTrainerDto> {
    private final Logger logger = LoggerFactory.getLogger(TrainerService.class);
    private final TrainerRepository trainerRepository;
    private final UserService userService;
    private final TrainingRepository trainingRepository;

    @Autowired
    public TrainerService(@NotNull TrainerRepository trainerRepository, @NotNull UserService userService, TrainingRepository trainingRepository) {
        this.trainerRepository = trainerRepository;
        this.userService = userService;
        this.trainingRepository = trainingRepository;
    }

    /**
     * Creates a new Trainer
     *
     * @return A new instance of {@link Trainer} with the autogenerated properties populated,
     * or null if it couldn't be created.
     * @see User
     */
    @Nullable
    public Trainer create(@NotNull String firstName, @NotNull String lastName, String specializationName) {
        logger.trace("create: firstName='{}', lastName='{}', specializationName={}", firstName, lastName, specializationName);
        try {
            if (specializationName == null)
                return null;

            var specialization = TrainingType.valueOf(specializationName.toUpperCase());

            var user = userService.createUser(firstName, lastName, User.Role.TRAINER);

            return trainerRepository.save(new Trainer(specialization, user));
        } catch (IllegalArgumentException e) {
            logger.info("Cannot create Trainer. Specialization {} does not exist.", specializationName);
            return null;
        }
    }

    @Nullable
    public Trainer create(@NotNull TrainerRegistrationViewModel vm) {
        if (vm.getSpecialization() != null && !vm.getSpecialization().isBlank()) {
            return create(vm.getFirstName(), vm.getLastName(), vm.getSpecialization());
        } else {
            return create(vm.getFirstName(), vm.getLastName(), vm.getSpecializationId());
        }

    }

    /**
     * Create a new User and a Trainer with the User id
     *
     * @param firstName        The User firstname
     * @param lastName         The User lastname
     * @param specializationId the Trainer Specialization id
     * @return A new instance of {@link Trainer} with autogenerated properties populated, including the userId
     * or null if it couldn't be created.
     * @see User
     * @see com.javabootcamp.gym.data.model.TrainingType
     */
    @Nullable
    public Trainer create(@NotNull String firstName, @NotNull String lastName, int specializationId) {
        logger.trace("create: firstName='{}', lastName='{}', specializationId={}", firstName, lastName, specializationId);

        try {
            if (specializationId <= 0)
                return null;

            var specialization = TrainingType.byId(specializationId);

            var user = userService.createUser(firstName, lastName, User.Role.TRAINER);

            return trainerRepository.save(new Trainer(specialization, user));
        } catch (IllegalArgumentException e) {
            logger.info("Cannot create Trainer. Specialization id {} does not exist.", specializationId);
            return null;
        }
    }

    @Nullable
    public Trainer getByUsername(@NotNull String username) {
        logger.trace("getByUsername: username={}", username);

        var user = userService.get(username);

        return user.map(User::getTrainer).orElse(null);
    }

    @NotNull
    public Optional<List<TrainerTrainingDto>> getTrainings(@NotNull String username, @NotNull TrainingFilterDto dto) {
        try {
            var r = trainingRepository.getTrainerTrainings(username, dto.periodFrom(), dto.periodTo(), dto.trainingTypeName(), dto.name());

            var l = r.stream()
                    .map(t -> new TrainerTrainingDto(
                            t.getName(),
                            t.getDate(),
                            t.getTrainingType().toString(),
                            t.getDuration(),
                            t.getTrainee().getUser().getUsername()));

            return Optional.of(l.toList());
        } catch (Exception e) {
            logger.error("Error getting trainer trainings", e);
            return Optional.empty();
        }
    }

    public boolean update(@NotNull String username, @NotNull UpdateTrainerDto dto) {
        try {
//            var t = trainerRepository.findFirstByUserUsername(dto.username());
//            if (t.isEmpty())
//                return false;
//
//            var trainer = t.get();
//            trainer.getUser().setFirstName(dto.firstName());
//            trainer.getUser().setLastName(dto.lastName());
//            trainer.getUser().setActive(dto.isActive());

            var trainer = ServiceHelper.apply(username,
                    trainerRepository::findFirstByUserUsername,
                    UpdateServiceHelper.updateUser(dto.firstName(), dto.lastName(), dto.isActive()),
                    Trainer::getUser);

            if (trainer == null)
                return false;

            TrainingType trainingType;
            if (dto.specialization() != null) {
                trainingType = TrainingType.valueOf(dto.specialization());
            } else {
                trainingType = TrainingType.byId(dto.specializationId());
            }
            trainer.setSpecialization(trainingType);

            trainerRepository.save(trainer);

            return true;
        } catch (IllegalArgumentException e) {
            logger.info("Cannot update Trainer. Specialization does not exist.", e);
            return false;
        } catch (Exception e) {
            logger.error("Error updating trainer", e);
            return false;
        }
    }
}
