package com.javabootcamp.gym.services;

import com.javabootcamp.gym.data.dto.TraineeTrainingDto;
import com.javabootcamp.gym.data.dto.TrainingFilterDto;
import com.javabootcamp.gym.data.dto.UpdateTraineeDto;
import com.javabootcamp.gym.data.model.Trainee;
import com.javabootcamp.gym.data.model.User;
import com.javabootcamp.gym.data.repository.TraineeRepository;
import com.javabootcamp.gym.data.repository.TrainingRepository;
import com.javabootcamp.gym.data.viewmodels.TraineeRegistrationViewModel;
import com.javabootcamp.gym.services.helper.ServiceHelper;
import com.javabootcamp.gym.services.helper.UpdateServiceHelper;
import com.javabootcamp.gym.services.user.UserService;
import jakarta.transaction.Transactional;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

@Service
@Transactional
public class TraineeService implements IUpdateService<UpdateTraineeDto> {
    private final Logger logger = LoggerFactory.getLogger(TraineeService.class);
    private final TraineeRepository traineeRepository;
    private final TrainingRepository trainingRepository;
    private final UserService userService;


    @Autowired
    public TraineeService(@NotNull TraineeRepository traineeRepository, TrainingRepository trainingRepository, @NotNull UserService userService) {
        this.traineeRepository = traineeRepository;
        this.trainingRepository = trainingRepository;
        this.userService = userService;
    }

    /**
     * Create a new User and a Trainee with the User id
     *
     * @param firstName   The User firstname
     * @param lastName    The User lastname
     * @param dateOfBirth The Trainee date of birth
     * @param address     The Trainee address
     * @return A new instance of {@link Trainee} with autogenerated properties populated, including the userId, or null
     * * if the {@code dateOfBirth} is incorrect or there was a problem when writing to the datasource
     * @see User
     */
    @Nullable
    public Trainee create(@NotNull String firstName, @NotNull String lastName, @NotNull LocalDate dateOfBirth, @NotNull String address) {
        logger.trace("create: firstName='{}', lastName={}, dateOfBirth={}, address='{}'", firstName, lastName, dateOfBirth, address);

        if (!ServiceHelper.isValidDate(dateOfBirth)) return null;

        var user = userService.createUser(firstName, lastName, User.Role.TRAINEE);

        return traineeRepository.save(new Trainee(dateOfBirth, address, user));
    }

    @Nullable
    public Trainee create(TraineeRegistrationViewModel vm) {
        return create(vm.getFirstName(), vm.getLastName(), vm.getDateOfBirth(), vm.getAddress());
    }

    @Nullable
    public Trainee getByUsername(@NotNull String username) {
        logger.trace("getByUsername: username={}", username);
        var user = userService.get(username);
//        if (user.isEmpty())
//            return null;
//
//        var trainee = user.get().getTrainee();
//
//        return trainee;
        return user.map(User::getTrainee).orElse(null);
    }

    @NotNull
    public Optional<List<TraineeTrainingDto>> getTrainings(@NotNull String username, @NotNull TrainingFilterDto dto) {
        try {
            var r = trainingRepository.getTraineeTrainings(username, dto.periodFrom(), dto.periodTo(), dto.trainingTypeName(), dto.name());

            var l = r.stream()
                    .map(t -> new TraineeTrainingDto(
                            t.getName(),
                            t.getDate(),
                            t.getTrainingType().getName(),
                            t.getDuration(),
                            t.getTrainer().getUser().getUsername()));

            return Optional.of(l.toList());
        } catch (Exception e) {
            logger.error("Error getting trainee trainings", e);
            return Optional.empty();
        }
    }

    public boolean update(@NotNull String username, @NotNull UpdateTraineeDto dto) {
        try {


//            var t = traineeRepository.findFirstByUserUsername(dto.username());
//            if (t.isEmpty())
//                return false;
//
//            var trainee = t.get();
//            trainee.getUser().setFirstName(dto.firstName());
//            trainee.getUser().setLastName(dto.lastName());
//            trainee.getUser().setActive(dto.isActive());

            var trainee =
                    ServiceHelper.apply(username,
                            traineeRepository::findFirstByUserUsername,
                            UpdateServiceHelper.updateUser(dto.firstName(), dto.lastName(), dto.isActive()),
                            Trainee::getUser);

            if (trainee == null)
                return false;

            if (dto.dateOfBirth() != null)
                trainee.setDateOfBirth(dto.dateOfBirth());

            if (dto.address() != null)
                trainee.setAddress(dto.address());

            traineeRepository.save(trainee);

            return true;
        } catch (Exception e) {
            logger.error("Error updating trainee", e);
            return false;
        }
    }

    @NotNull
    public Optional<Boolean> delete(@NotNull String username) {
        try {
            var t = traineeRepository.findFirstByUserUsername(username);

            if (t.isEmpty())
                return Optional.empty();

            traineeRepository.delete(t.get());
            return Optional.of(true);
        } catch (
                Exception e) {
            logger.error("Error deleting trainee", e);
            return Optional.of(false);
        }
    }
}
