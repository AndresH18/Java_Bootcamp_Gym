AWSTemplateFormatVersion: 2010-09-09
Description: Gym cloud template

Parameters:
#  AmazonS3ReadOnlyAccessPolicy:
#    Type: String
#    Description: ARN of the AWS managed policy that allows read only access to s3 buckets. # Read more: https://repost.aws/knowledge-center/cloudformation-attach-managed-policy
#    Default: arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

  AvailabilityZoneName1:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-east-1a

  AvailabilityZoneName2:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-east-1b

  Ec2InstanceAvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-east-1a

  VpcCidrBlock:
    Type: String
    Default: 192.168.0.0/16
    Description: "The CIDR block for the VPC"

  PublicSubnetCidrBlock1:
    Type: String
    Default: 192.168.1.0/24
    Description: Subnet CIDR block for VPC

  PrivateSubnetCidrBlock1:
    Type: String
    Default: 192.168.2.0/24
    Description: Subnet CIDR block for VPC

  PublicSubnetCidrBlock2:
    Type: String
    Default: 192.168.3.0/24
    Description: Subnet CIDR block for VPC

  PrivateSubnetCidrBlock2:
    Type: String
    Default: 192.168.4.0/24
    Description: Subnet CIDR block for VPC

  VpcName:
    Type: String
    Default: gym-vpc

  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of the existing key pair

  LocalIpAddress:
    Type: String
    Default: 177.255.52.182/32   # 177.255.52.182/32
    Description: My IP address

  DbInstanceIdentifier:
    Type: String
    Default: gym-crm-db

  DbName:
    Type: String
    Default: gym

  DbMasterUsername:
    Type: String
    Default: SuperUsernameGym

  DbMasterPassword:
    Type: String
    Default: a3VtUsTTJ4WKq4UHEutE

  ReportsBucketName:
    Type: String
    Default: gym-reports-bucket

  SqsFIFOQueueName:
    Type: String
    Default: gym-reporting-service-queue.fifo
    Description: "Name of the Simple Queue Service"

  CrmInstanceName:
    Type: String
    Description: Name for the crm instance
    Default: gym-crm-instance

  ReportingInstanceName:
    Type: String
    Description: Name for the reporting instance
    Default: gym-reporting-instance

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    DeletionPolicy: Delete
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref VpcName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DeletionPolicy: Delete
    Properties:
      Tags:
        - Key: Name
          Value: gym-internet-gateway

  # attach internet gateway to vpc
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  # public subnet 1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PublicSubnetCidrBlock1
      AvailabilityZone: !Ref AvailabilityZoneName1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: gym-public-subnet-1

  # private subnet 1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateSubnetCidrBlock1
      AvailabilityZone: !Ref AvailabilityZoneName1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: gym-private-subnet-1

  # public subnet 2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PublicSubnetCidrBlock2
      AvailabilityZone: !Ref AvailabilityZoneName2
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: gym-public-subnet-2

  # private subnet 2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateSubnetCidrBlock2
      AvailabilityZone: !Ref AvailabilityZoneName2
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: gym-private-subnet-2

  # public routing

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: gym-public-route-table

  PublicRoute:
    Type: AWS::EC2::Route
    DeletionPolicy: Delete
    Properties:
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: '0.0.0.0/0'

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DeletionPolicy: Delete
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DeletionPolicy: Delete
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # private routing

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: gym-private-route-table

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DeletionPolicy: Delete
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DeletionPolicy: Delete
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # security groups

  RdsSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    DeletionPolicy: Delete
    Description: Availability zones subnets for rds, logical grouping of subnets that allows the RDS instance to be placed within multiple Availability Zones for high availability and fault tolerance.
    Properties:
      DBSubnetGroupDescription: Subnet group for rds.
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  SshSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    Properties:
      GroupDescription: Allow ssh communication
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
          Description: Allow ssh

  LocalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    Properties:
      GroupDescription: Allow traffic from local ip
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - CidrIp: !Ref LocalIpAddress
          IpProtocol: 'tcp'
          FromPort: 3306
          ToPort: 3306
      SecurityGroupEgress:
        - CidrIp: !Ref LocalIpAddress
          IpProtocol: 'tcp'
          FromPort: 3306
          ToPort: 3306

  CrmInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    Description: Allow egress to rds security group
    Properties:
      GroupDescription: Allow inbound traffic on port 8081; and communication with rds mysql database
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          ToPort: 8081
          FromPort: 8081
          CidrIp: '0.0.0.0/0'
          Description: Allows inbound traffic to port 8081

  RdsSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    DeletionPolicy: Delete
    Description: Egress rule to allow communicating instance with rds
    Properties:
      GroupId: !Ref CrmInstanceSecurityGroup
      IpProtocol: 'tcp'
      DestinationSecurityGroupId: !Ref DbSecurityGroup
      FromPort: 3306
      ToPort: 3306
      Description: Allow egress from rds mysql database

  RdsSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DeletionPolicy: Delete
    Description: Ingress rule to allow communicating instance with rds
    Properties:
      GroupId: !Ref CrmInstanceSecurityGroup
      IpProtocol: 'tcp'
      SourceSecurityGroupId: !Ref DbSecurityGroup
      FromPort: 3306
      ToPort: 3306
      Description: Allow ingress from rds mysql database

  DbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: Allow access to rds
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref CrmInstanceSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: 'tcp'
          FromPort: 3306
          ToPort: 3306
          DestinationSecurityGroupId: !Ref CrmInstanceSecurityGroup


  # RDS database
  GymCrmDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: "mysql"
      EngineVersion: 8.0
      DBInstanceIdentifier: !Ref DbInstanceIdentifier
      DBName: !Ref DbName
      MasterUsername: !Ref DbMasterUsername
      MasterUserPassword: !Ref DbMasterPassword
      AllocatedStorage: 20
      StorageType: gp2
      DBInstanceClass: db.t2.micro
      NetworkType: ipv4
      PubliclyAccessible: true # TODO: disable public accessibility
      Port: 3306
      DBSubnetGroupName:
        Ref: RdsSubnetGroup
      VPCSecurityGroups:
        - !Ref DbSecurityGroup
        - !Ref LocalSecurityGroup
    #        - !Ref CrmInstanceSecurityGroup #
    Description: "Database instance for the GYM CRM, manage users, trainers, trainees, trainings, and security related data (like JWTs and login attempts)"
    DeletionPolicy: Delete

  CrmInstance:
    Type: AWS::EC2::Instance
    DeletionPolicy: Delete
    Description: Ec2 instance for the Gym crm microservice
    Properties:
      ImageId: ami-0230bd60aa48260c6
      AvailabilityZone: !Ref Ec2InstanceAvailabilityZone
      InstanceType: t2.micro
      IamInstanceProfile: !Ref CrmInstanceProfile
      SecurityGroupIds:
        - !Ref SshSecurityGroup
        - !Ref CrmInstanceSecurityGroup
      SubnetId: !Ref PublicSubnet1
      KeyName: !Ref KeyPairName
      Tags:
        - Key: Name
          Value: !Ref CrmInstanceName

  ReportingInstance:
    Type: AWS::EC2::Instance
    DeletionPolicy: Delete
    Properties:
      ImageId: ami-0230bd60aa48260c6
      AvailabilityZone: !Ref Ec2InstanceAvailabilityZone
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref SshSecurityGroup
        - !Ref CrmInstanceSecurityGroup
      SubnetId: !Ref PublicSubnet1
      KeyName: !Ref KeyPairName
      Tags:
        - Key: Name
          Value: !Ref ReportingInstanceName

  CrmInstanceRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    Description: Role that allows reading an s3 bucket (deployment bucket) and sending messages to sqs
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: S3-Deployment-ReadOnlyAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Effect: Allow
              Action:
                - 's3:GetObject'
                - 's3:ListBucket'
              Resource: 'arn:aws:s3:::gym-deploy-bucket'
        - PolicyName: SQS-FullAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Effect: Allow
              Action: 'sqs:*'
              Resource: !GetAtt MessageQueue.Arn
      Tags:
        - Key: Name
          Value: gym-crm-instance-role

  CrmInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DeletionPolicy: Delete
    Properties:
      InstanceProfileName: gym-crm-instance-profile
      Roles:
        - !Ref CrmInstanceRole


  MessageQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    Properties:
      FifoQueue: true
      QueueName:
        Ref: SqsFIFOQueueName

  ReportDb:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    Description: DynamoDb table to store training's information
    Properties:
      TableName: TrainingSummary
      AttributeDefinitions:
        - AttributeName: trainerUsername
          AttributeType: S
      KeySchema:
        - AttributeName: trainerUsername
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ReportsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Description: "Bucket to store the reports"
    Properties:
      BucketName: !Ref ReportsBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
  MyBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DeletionPolicy: Delete
    Description: "This policy allows public read access to the bucket"
    Properties:
      Bucket:
        Ref: ReportsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource:
              Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: ReportsBucket
                  - '/*'

Outputs:
  DbInstanceEndpoint:
    Description: "Endpoint of the RDS instance"
    Value: !GetAtt GymCrmDatabase.Endpoint.Address

  ReportsBucketEndpoint:
    Description: "URL for the Reports S3 bucket"
    Value: !GetAtt ReportsBucket.WebsiteURL

  SqsQueueName:
    Description: "Name of the SQS Queue"
    Value: !GetAtt MessageQueue.QueueName

  SqsQueueUrl:
    Description: "URL for the SQS Queue"
    Value: !GetAtt MessageQueue.QueueUrl

  CrmInstancePublicIp:
    Description: "Public IP of crm instance"
    Value: !GetAtt CrmInstance.PublicIp

  CrmInstancePrivateIp:
    Description: "Private IP of crm instance"
    Value: !GetAtt CrmInstance.PrivateIp

  ReportingInstancePublicIp:
    Description: "Public IP of reporting instance"
    Value: !GetAtt ReportingInstance.PublicIp

  ReportingInstancePrivateIp:
    Description: "Private IP of reporting instance"
    Value: !GetAtt ReportingInstance.PrivateIp