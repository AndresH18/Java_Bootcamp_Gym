AWSTemplateFormatVersion: 2010-09-09
Description: Test template for ec2 with vpc, subnets

Parameters:
#  KeyPairName:
#    Type: AWS::EC2::KeyPair::KeyName
#    Description: Name of the existing key pair
  # AZ Name where subnet will be created
  AvailabilityZoneName1:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-east-1a

  AvailabilityZoneName2:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-east-1b

  Ec2InstanceAvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-east-1a

  CidrBlock:
    Type: String
    Default: 192.168.0.0/16
    Description: "The CIDR block for the VPC"

  PublicSubnetCidrBlock1:
    Type: String
    Default: 192.168.1.0/24

  PrivateSubnetCidrBlock1:
    Type: String
    Default: 192.168.2.0/24

  PublicSubnetCidrBlock2:
    Type: String
    Default: 192.168.3.0/24

  PrivateSubnetCidrBlock2:
    Type: String
    Default: 192.168.4.0/24

  VpcName:
    Type: String
    Default: test-vpc

  KeyPairName:
    Type: String
    Default: gym-ec2-keypair


Resources:
  # create a vpc
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref VpcName
    DeletionPolicy: Delete

  # create internet gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: test-internet-gateway

    DeletionPolicy: Delete

  # attaching the gateway to the vpc
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
    DeletionPolicy: Delete


  # public subnet1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PublicSubnetCidrBlock1
      AvailabilityZone: !Ref AvailabilityZoneName1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: test-public-subnet-1
    DeletionPolicy: Delete

  # private subnet1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateSubnetCidrBlock1
      AvailabilityZone: !Ref AvailabilityZoneName1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: test-private-subnet-1
    DeletionPolicy: Delete

  # public subnet2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PublicSubnetCidrBlock2
      AvailabilityZone: !Ref AvailabilityZoneName2
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: test-public-subnet-1
    DeletionPolicy: Delete

  # private subnet2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateSubnetCidrBlock2
      AvailabilityZone: !Ref AvailabilityZoneName2
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: test-private-subnet-1
    DeletionPolicy: Delete

  # public route table for vpc
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: test-public-route-table
    DeletionPolicy: Delete

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: '0.0.0.0/0'
    DeletionPolicy: Delete

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
    DeletionPolicy: Delete


  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
    DeletionPolicy: Delete

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: test-private-route-table
    DeletionPolicy: Delete

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
    DeletionPolicy: Delete

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
    DeletionPolicy: Delete

  Ec2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0230bd60aa48260c6
      AvailabilityZone: !Ref Ec2InstanceAvailabilityZone
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref Ec2SecurityGroup1
      SubnetId: !Ref PublicSubnet1
      KeyName: !Ref KeyPair
      Tags:
        - Key: Name
          Value: !Ref ec2InstanceName
    DeletionPolicy: Delete

  Ec2SecurityGroup1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for instance 1 with public access on port 8081 and ssh
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
          Description: allow ssh
#        - IpProtocol: 'tcp'
#          ToPort: 8081
      Tags:
        - Key: Name
          Value: my-ec2-instance
    DeletionPolicy: Delete

  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Ref KeyPairName
    DeletionPolicy: Delete

Outputs:
  KeyPairName:
    Description: Name of the key pair
    Value: !Ref KeyPair

  KeyPairId:
    Description: Name of the key pair
    Value: !GetAtt KeyPair.KeyPairId