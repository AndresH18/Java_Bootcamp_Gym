package com.javabootcamp.gym.services;

import com.javabootcamp.gym.data.dao.TraineeDao;
import com.javabootcamp.gym.data.dao.UserDao;
import com.javabootcamp.gym.data.model.Trainee;
import com.javabootcamp.gym.data.model.User;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.util.UUID;

@Service
public class TraineeService {
    private final Logger logger = LoggerFactory.getLogger(TraineeService.class);
    private final TraineeDao traineeDao;
    private final UserDao userDao;


    @Autowired
    public TraineeService(@NotNull TraineeDao traineeDao, @NotNull UserDao userDao) {
        this.traineeDao = traineeDao;
        this.userDao = userDao;
    }

    /**
     * Creates a new Trainee
     *
     * @param userId      of {@link User}
     * @param dateOfBirth The date of birth
     * @param address     The Trainee address
     * @return A new instance of {@link Trainee} with autogenerated properties populated, or null
     * if the {@code dateOfBirth} is incorrect or there was a problem when writing to the datasource
     * @see User
     */
    @Nullable
    public Trainee create(int userId, @NotNull LocalDate dateOfBirth, @NotNull String address) {
        logger.trace("create: userId={}, dateOfBirth={}, address='{}'", userId, dateOfBirth, address);
        if (!isValidDate(dateOfBirth)) {
            logger.info("Invalid date");
            return null;
        }
        logger.info("Creating trainer");

        if (!userDao.exists(userId)) {
            logger.trace("create: user ({}) not found", userId);
            return null;
        }

        var trainee = new Trainee(userId, dateOfBirth, address);

        return traineeDao.create(trainee);
    }

    /**
     * Create a new User and a Trainee with the User id
     *
     * @param firstName   The User firstname
     * @param lastName    The User lastname
     * @param dateOfBirth The Trainee date of birth
     * @param address     The Trainee address
     * @return A new instance of {@link Trainee} with autogenerated properties populated, including the userId, or null
     * * if the {@code dateOfBirth} is incorrect or there was a problem when writing to the datasource
     * @see User
     */
    @Nullable
    public Trainee create(@NotNull String firstName, @NotNull String lastName, @NotNull LocalDate dateOfBirth, @NotNull String address) {
        logger.trace("create: firstName='{}', lastName={}, dateOfBirth={}, address='{}'", firstName, lastName, dateOfBirth, address);

        if (!isValidDate(dateOfBirth)) return null;

        var user = new User(firstName, lastName);
        var username = firstName.split(" ")[0].toLowerCase() + "."
                + lastName.split(" ")[0].toLowerCase();
        logger.trace("create: username prefix '{}'", username);

        var count = userDao.count(u -> u.getUsername().matches(username + "\\d*"));
        logger.trace("create: username count: {}", count);

        user.setUsername(username + count);
        user.setPassword(UUID.randomUUID().toString().replace("-", "").substring(0, 10));
        logger.trace("create: username='{}', password='{}'", user.getUsername(), user.getPassword());

        user = userDao.create(user);
        logger.info("create: created user");

        return traineeDao.create(new Trainee(user.getId(), dateOfBirth, address));
    }

    @Nullable
    public Trainee getById(int id) {
        logger.trace("getById: id={}", id);
        if (id <= 0) return null;

        logger.info("Retrieving Trainee");

        return traineeDao.getById(id);
    }

    public boolean update(@NotNull Trainee trainee) {
        logger.trace("update: updating user id={}", trainee.getId());
        if (trainee.getId() <= 0) {
            logger.trace("update: invalid id");
            return false;
        }

        return traineeDao.update(trainee);
    }

    public boolean delete(int id) {
        logger.trace("delete: id={}", id);
        var t = getById(id);
        if (t == null) return false;

        return traineeDao.delete(t);
    }

    /**
     * Checks if a date is greater than the current date.
     *
     * @param date The date to compare
     * @return true if the date before the current date.
     */
    private boolean isValidDate(LocalDate date) {
        return LocalDate.now().isAfter(date);
    }
}
