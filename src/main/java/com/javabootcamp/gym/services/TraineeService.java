package com.javabootcamp.gym.services;

import com.javabootcamp.gym.data.model.Trainee;
import com.javabootcamp.gym.data.model.User;
import com.javabootcamp.gym.data.repository.TraineeRepository;
import com.javabootcamp.gym.data.repository.UserRepository;
import com.javabootcamp.gym.services.helper.UserHelper;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDate;

@Service
public class TraineeService {
    private final Logger logger = LoggerFactory.getLogger(TraineeService.class);
    private final TraineeRepository traineeRepository;
    private final UserRepository userRepository;

    @Autowired
    public TraineeService(@NotNull TraineeRepository traineeRepository, @NotNull UserRepository userRepository) {
        this.traineeRepository = traineeRepository;
        this.userRepository = userRepository;
    }

    /**
     * Creates a new Trainee
     *
     * @param userId      of {@link User}
     * @param dateOfBirth The date of birth
     * @param address     The Trainee address
     * @return A new instance of {@link Trainee} with autogenerated properties populated, or null
     * if the {@code dateOfBirth} is incorrect or there was a problem when writing to the datasource
     * @see User
     */
    @Nullable
    public Trainee create(int userId, @NotNull LocalDate dateOfBirth, @NotNull String address) {
        logger.trace("create: userId={}, dateOfBirth={}, address='{}'", userId, dateOfBirth, address);
        if (isInvalidDate(dateOfBirth)) {
            logger.info("Invalid date");
            return null;
        }

        var user = userRepository.findById(userId);

        if (user.isEmpty()) {
            logger.trace("create: user ({}) not found", userId);
            return null;
        }
        logger.info("Creating trainer");

        var trainee = new Trainee(dateOfBirth, address, user.get());

        return traineeRepository.save(trainee);
    }

    /**
     * Create a new User and a Trainee with the User id
     *
     * @param firstName   The User firstname
     * @param lastName    The User lastname
     * @param dateOfBirth The Trainee date of birth
     * @param address     The Trainee address
     * @return A new instance of {@link Trainee} with autogenerated properties populated, including the userId, or null
     * * if the {@code dateOfBirth} is incorrect or there was a problem when writing to the datasource
     * @see User
     */
    @Nullable
    public Trainee create(@NotNull String firstName, @NotNull String lastName, @NotNull LocalDate dateOfBirth, @NotNull String address) {
        logger.trace("create: firstName='{}', lastName={}, dateOfBirth={}, address='{}'", firstName, lastName, dateOfBirth, address);

        if (isInvalidDate(dateOfBirth)) return null;

        var username = UserHelper.createUsernamePrefix(firstName, lastName);
        logger.trace("create: username prefix '{}'", username);

        var count = userRepository.countUserByUsernameStartingWith(username);
        logger.trace("create: username count: {}", count);

        var user = UserHelper.createUser(firstName, lastName, username, count);

        logger.trace("create: username='{}', password='{}'", user.getUsername(), user.getPassword());

        user = userRepository.save(user);
        logger.info("create: created user");

        return traineeRepository.save(new Trainee(user.getId(), dateOfBirth, address));
    }

    @Nullable
    public Trainee getById(int id) {
        logger.trace("getById: id={}", id);
        if (id <= 0) return null;

        logger.info("Retrieving Trainee");

        var user = traineeRepository.findById(id);
        return user.orElse(null);
    }

    public boolean update(@NotNull Trainee trainee) {
        logger.trace("update: updating user id={}", trainee.getId());
        if (trainee.getId() <= 0) {
            logger.trace("update: invalid id");
            return false;
        }

        var optional = traineeRepository.findById(trainee.getId());
        if (optional.isEmpty())
            return false;

        trainee = optional.get().copyFrom(trainee);
        trainee = traineeRepository.save(trainee);

        return true;
    }

    public boolean delete(int id) {
        logger.trace("delete: id={}", id);
        if (id <= 0)
            return false;

//        var optional = traineeRepository.findById(id);
//        if (optional.isEmpty())
//            return false;
//
//        traineeRepository.delete(optional.get());

        traineeRepository.deleteById(id);
        return true;
    }

    /**
     * Checks if a date is valid.
     *
     * @param date The date to compare
     * @return true if the date is valid.
     */
    private static boolean isValidDate(LocalDate date) {
        return LocalDate.now().isAfter(date);
    }

    private static boolean isInvalidDate(LocalDate date) {
        return !isValidDate(date);
    }
}
