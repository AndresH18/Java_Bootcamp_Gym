package com.javabootcamp.gym.services;

import com.javabootcamp.gym.data.dao.TrainerDao;
import com.javabootcamp.gym.data.dao.UserDao;
import com.javabootcamp.gym.data.model.Trainer;
import com.javabootcamp.gym.data.model.User;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.UUID;

@Service
public class TrainerService {
    private final TrainerDao trainerDao;
    private final UserDao userDao;

    @Autowired
    public TrainerService(TrainerDao trainerDao, UserDao userDao) {
        this.trainerDao = trainerDao;
        this.userDao = userDao;
    }

    /**
     * Creates a new Trainer
     *
     * @param userId           The {@link User} id
     * @param specializationId The {@link com.javabootcamp.gym.data.model.TrainingType} id
     * @return A new instance of {@link Trainer} with the autogenerated properties populated,
     * or null if it couldn't be created.
     * @see User
     */
    @Nullable
    public Trainer create(int userId, int specializationId) {
        if (userDao.exists(userId))
            return null;

        var trainer = new Trainer(userId, specializationId);

        return trainerDao.create(trainer);
    }

    /**
     * Create a new User and a Trainer with the User id
     *
     * @param firstName        The User firstname
     * @param lastName         The User lastname
     * @param specializationId the Trainer Specialization id
     * @return A new instance of {@link Trainer} with autogenerated properties populated, including the userId
     * or null if it couldn't be created.
     * @see User
     * @see com.javabootcamp.gym.data.model.TrainingType
     */
    @Nullable
    public Trainer create(@NotNull String firstName, @NotNull String lastName, int specializationId) {
        var user = new User(firstName, lastName);
        var username = firstName.split(" ")[0].toLowerCase()
                + lastName.split(" ")[0].toLowerCase();

        var count = userDao.count(u -> u.getUsername().matches(username + "\\d*"));

        user.setUsername(username + count);
        user.setPassword(UUID.randomUUID().toString().replace("-", "").substring(0, 10));

        user = userDao.create(user);

        return trainerDao.create(new Trainer(user.getId(), specializationId));
    }

    @Nullable
    public Trainer getById(int id) {
        return id > 0 ? trainerDao.getById(id) : null;

    }

    boolean update(@NotNull Trainer trainer) {
        if (trainer.getId() <= 0) return false;

        return trainerDao.update(trainer);
    }
}
