package com.javabootcamp.gym.services;

import com.javabootcamp.gym.data.dao.TrainerDao;
import com.javabootcamp.gym.data.dao.UserDao;
import com.javabootcamp.gym.data.model.Trainer;
import com.javabootcamp.gym.data.model.User;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.UUID;

@Service
public class TrainerService {
    private final Logger logger = LoggerFactory.getLogger(TrainerService.class);
    private final TrainerDao trainerDao;
    private final UserDao userDao;

    @Autowired
    public TrainerService(@NotNull TrainerDao trainerDao, @NotNull UserDao userDao) {
        this.trainerDao = trainerDao;
        this.userDao = userDao;
    }

    /**
     * Creates a new Trainer
     *
     * @param userId           The {@link User} id
     * @param specializationId The {@link com.javabootcamp.gym.data.model.TrainingType} id
     * @return A new instance of {@link Trainer} with the autogenerated properties populated,
     * or null if it couldn't be created.
     * @see User
     */
    @Nullable
    public Trainer create(int userId, int specializationId) {
        logger.trace("create: userId={}, specializationId={}", userId, specializationId);
        if (userId <= 0 || specializationId <= 0) {
            logger.trace("Invalid id(s)");
            return null;
        }

        if (!userDao.exists(userId)) {
            logger.trace("create: user ({}) not found", userId);
            return null;
        }

        logger.info("Creating trainer");
        var trainer = new Trainer(userId, specializationId);

        return trainerDao.create(trainer);
    }

    /**
     * Create a new User and a Trainer with the User id
     *
     * @param firstName        The User firstname
     * @param lastName         The User lastname
     * @param specializationId the Trainer Specialization id
     * @return A new instance of {@link Trainer} with autogenerated properties populated, including the userId
     * or null if it couldn't be created.
     * @see User
     * @see com.javabootcamp.gym.data.model.TrainingType
     */
    @Nullable
    public Trainer create(@NotNull String firstName, @NotNull String lastName, int specializationId) {
        logger.trace("create: firstName='{}', lastName='{}', specializationId={}", firstName, lastName, specializationId);
        var user = new User(firstName, lastName);
        var username = firstName.split(" ")[0].toLowerCase() + "."
                + lastName.split(" ")[0].toLowerCase();
        logger.trace("create: username prefix '{}'", username);

        var count = userDao.count(u -> u.getUsername().matches(username + "\\d*"));
        logger.trace("create: username count: {}", count);

        user.setUsername(username + count);
        user.setPassword(UUID.randomUUID().toString().replace("-", "").substring(0, 10));

        logger.trace("create: username='{}', password='{}'", user.getUsername(), user.getPassword());

        user = userDao.create(user);
        logger.info("create: created user");

        return trainerDao.create(new Trainer(user.getId(), specializationId));
    }

    @Nullable
    public Trainer getById(int id) {
        logger.trace("getById: id={}", id);
        if (id <= 0) return null;

        logger.info("Retrieving training");

        return trainerDao.getById(id);
    }

    boolean update(@NotNull Trainer trainer) {
        logger.trace("update: updating user id={}", trainer.getId());
        if (trainer.getId() <= 0) {
            logger.trace("update: invalid id");
            return false;
        }
        return trainerDao.update(trainer);
    }
}
